#!/usr/bin/env python3

import re
from fabrics.bigswitch_fabric import BigSwitchFabric
from fabrics.cisco_aci_fabric import CiscoACIFabric
from dcim.netbox_manager import NetBoxManager
from config.config_manager import ConfigManager
from dcim.ip_manager import IPManager


def main():
    
    config = ConfigManager()
    config.load()  # Load configuration from both environment variables and arguments
    ip_manager = IPManager() # Initialize IPManager and pass it to other classes
    
    if not config.get('netbox_url') or not config.get('netbox_token'):
        raise ValueError("NetBox URL and token must be provided either as arguments or environment variables (--help for more)")

    if not config.get('fabric_type') or not config.get('fabric_url') or not config.get('fabric_user') or not config.get('fabric_pass'):
        raise ValueError("Must specify fabric information (type, url, user, pass) as arguments or environment variables (--help for more)")

    DEBUG = config.get('debug')
    
    # Initialize the NetBox Manager
    netbox_manager = NetBoxManager(config, ip_manager)
    if netbox_manager: print(f"Connected to netbox API at {config.get('netbox_url')}")
    else:
        raise ValueError(f"Failed to connect to netbox API at {config.get('netbox_url')}")

    # Initialize the appropriate fabric based on the fabric-type argument
    if config.get('fabric_type').lower() == 'bigswitch':
        fabric = BigSwitchFabric(config, ip_manager)
    elif config.get('fabric_type').lower() == 'cisco-aci':
        fabric = CiscoACIFabric(config, ip_manager)
    else:
        raise ValueError("Unsupported fabric type. Supported values are 'bigswitch' and 'cisco-aci'.")

    # Connect to the fabric
    fabric.connect()
    
    # Create Virtual Chassis to represent Fabric
    controller = {}  
    vc={}
    vc['name'] = config.get('fabric_name') or (config.get('fabric_type').upper()+'-'+re.sub(r'http[s]*\:\/\/([0-9A-z]*)\.*.*',r'\1',config.get('fabric_url').lower())).upper()
    print(f"Creating/Updating Virtual Chassis and Controller {vc['name']} for Fabric")

    # Create Virtual Device to represent Fabric Controller
    if 'bigswitch' in config.get('fabric_type').lower(): 
        manufacturer = 'Arista' 
    elif 'cisco-aci' in config.get('fabric_type').lower():
        manufacturer = 'Cisco'

    controller['name'] = vc['name']+" Controller"
    controller['device_type'] = {'model': 'Fabric Controller'}
    controller['manufacturer']= {'name': manufacturer}
    controller['role']={'name': 'Network Fabric Controller'}
    controller['status']='active'
    controller['site']={'name': config.get('netbox_site')}
        
    # Create virtual chassis and get id to use for controllers virtual chassis
    vc_id = netbox_manager.create_virtual_chassis(vc)['id']
    vc_position=0
    controller['virtual_chassis']=vc_id
    controller['vc_position']=vc_position
    controller['vc_priority']=0

    # Create controller and take id to set master on virtual chassis
    controller = netbox_manager.create_device(controller)
    vc['master']=controller['id']
    vc = netbox_manager.create_virtual_chassis(vc)

    # Sync switches to NetBox
    print(f'Collecting Devices from Fabric')
    switches = fabric.get_device_inventory()
    for switch in switches:
        switch['virtual_chassis']=vc_id
        vc_position=vc_position+1
        switch['vc_position']=vc_position
        switch['vc_priority']=0
        switch['site']={'name': config.get('netbox_site')}
        netbox_manager.create_device(switch)
        
        # Create Virtual Device to represent Fabric Controller
        print(f'Adding/Updating {switch.get("name")} to Fabric Virtual Chassis') if DEBUG else None
            
    # Sync interfaces to NetBox
    print(f'Collecting Interfaces from Fabric')
    switches = fabric.get_interface_inventory()
    if switches:
        for switch in switches:
           for interface in switch['interfaces']:
              netbox_manager.create_interface(interface)

    print(f'Setting Primary IPs on Devices') if DEBUG else None
    netbox_manager.update_device_with_primary_ips()
    
    # Sync Network Topology to NetBox
    print(f'Collecting Network Topology from Fabric')
    (networks,segments) = fabric.get_network_inventory()
     
    # Sync VLANs
    print(f'Creating/Updating VLANs in Netbox')
    # Sync Prefixes
    print(f'Creating/Updating Prefixes in Netbox')
    # Sync VLAN Layer3 interfaces
    print(f'Creating/Updating VLAN Layer3 Interfaces in Netbox')
    # Sync LAGss
    print(f'Creating/Updating LAGs in Netbox')
    
    # Sync connections (cables) to NetBox
    print(f'Collecting Connections from Fabric')
    #connections = fabric.get_connection_inventory()
    #if connections:
    #    for connection in connections:
    #       netbox_manager.create_connection(connection)

if __name__ == "__main__":
    main()
