#!/usr/bin/env python3

import re
import pprint
from fabrics.bigswitch_fabric import BigSwitchFabric
from fabrics.cisco_aci_fabric import CiscoACIFabric
from fabrics.cisco_dnac import CiscoDNAC
from dcim.netbox_manager import NetBoxManager
from config.config_manager import ConfigManager
from dcim.ip_manager import IPManager


def main():
    
    config = ConfigManager()
    config.load()  # Load configuration from both environment variables and arguments
    ip_manager = IPManager() # Initialize IPManager and pass it to other classes
    
    if not config.get('netbox_url') or not config.get('netbox_token'):
        raise ValueError("NetBox URL and token must be provided either as arguments or environment variables (--help for more)")

    if not config.get('fabric_type') or not config.get('fabric_url') or not config.get('fabric_user') or not config.get('fabric_pass'):
        raise ValueError("Must specify fabric information (type, url, user, pass) as arguments or environment variables (--help for more)")

    DEBUG = config.get('debug')
    
    # Initialize the NetBox Manager
    netbox_manager = NetBoxManager(config, ip_manager)
    if netbox_manager: print(f"Connected to netbox API at {config.get('netbox_url')}")
    else:
        raise ValueError(f"Failed to connect to netbox API at {config.get('netbox_url')}")

    # Initialize the appropriate fabric based on the fabric-type argument
    if config.get('fabric_type').lower() == 'bigswitch':
        fabric = BigSwitchFabric(config, ip_manager)
        manufacturer = 'Arista' 

    elif config.get('fabric_type').lower() == 'cisco-aci':
        fabric = CiscoACIFabric(config, ip_manager)
        manufacturer = 'Cisco'
    
    elif config.get('fabric_type').lower() == 'cisco-dnac':
        fabric = CiscoDNAC(config, ip_manager)
        manufacturer = 'Cisco'


    else:
        raise ValueError("Unsupported fabric type. Supported values are 'bigswitch' and 'cisco-aci'.")

    # Connect to the fabric
    fabric.connect()
    
    if (config.get('fabric_type').lower() != 'cisco-dnac'):
        # Create Virtual Chassis to represent Fabric
        controller = {}  
        vc={}
        vc['name'] = config.get('fabric_name') or (config.get('fabric_type').upper()+'-'+re.sub(r'http[s]*\:\/\/([0-9A-z]*)\.*.*',r'\1',config.get('fabric_url').lower())).upper()
        print(f"Creating/Updating Virtual Chassis and Controller {vc['name']} for Fabric")

        # Create Virtual Device to represent Fabric Controller
        controller['name'] = vc['name']+" Controller"
        controller['device_type'] = {'model': 'Fabric Controller'}
        controller['manufacturer']= {'name': manufacturer}
        controller['role']={'name': 'Network Fabric Controller'}
        controller['status']='active'
        controller['site']={'name': config.get('netbox_site')}
        
        
        # Create virtual chassis and get id to use for controllers virtual chassis
        vc_id = netbox_manager.create_virtual_chassis(vc)['id']
        vc_position=0
        controller['virtual_chassis']=vc_id
        controller['vc_position']=vc_position
        controller['vc_priority']=0

        # Create controller and take id to set master on virtual chassis
        controller = netbox_manager.create_device(controller)
        vc['master']=controller['id']
        vc = netbox_manager.create_virtual_chassis(vc)

    # Sync switches to NetBox
    print(f'Collecting Devices from Fabric')
    (switches,sites) = fabric.get_device_inventory()
    
    for site in sites:    
        parts = site.split('/')
        site_group = parts[1] if len(parts) > 1 else 'N/A'  # Athletics
        site = parts[2] if len(parts) > 2 else 'N/A'        # Reeves Football Ops
        location = parts[3] if len(parts) > 3 else 'N/A'

        print(f'Creating or Updating Site Group {site_group}')
        netbox_manager.create_or_update('site_groups','name', site_group, {'name': site_group, 'slug': netbox_manager.generate_slug(site_group)})
        print(f'Creating or Updating Site {site}')
        netbox_manager.create_or_update('sites','name',site, {'name': site, 'status': 'active', 'slug': netbox_manager.generate_slug(site), 'group': site_group })
        print(f'Creating or Updating Site Group {location}')
        netbox_manager.create_or_update('locations','name',location,{'name': location, 'site': site, 'slug': netbox_manager.generate_slug(location), 'status': 'active'})

    print(f"{len(switches)} devices returned")
    counter=0
    for switch in switches:
        counter += 1
        print(f"Processing #{counter} {switch['name']}")
        if (config.get('fabric_type').lower() != 'cisco-dnac'):
            switch['virtual_chassis']=vc_id
            vc_position=vc_position+1
            switch['vc_position']=vc_position
            switch['vc_priority']=0
            switch['site']={'name': site}
            # If 'interfaces' exist, pop them off and store separately            
            # Create the device in NetBox
        
        netbox_manager.create_device(switch)    
                            
    # Sync interfaces to NetBox
    print(f'Collecting Interfaces from Fabric')
    #Use the interfaces (if any) in a separate loop
    if (config.get('fabric_type').lower() != 'cisco-dnac'):
        interface_sw = fabric.get_interface_inventory()    
    
    if interface_sw:
        for switch in interface_sw:
            print(f'Creating {len(switch["interfaces"])} Interfaces for {switch["name"]}')
            for interface in switch['interfaces']:
                netbox_manager.create_interface(interface)

    print(f'Setting Primary IPs on Devices') if DEBUG == 1 else None
    netbox_manager.update_device_with_primary_ips()
    
    # Sync Network Topology to NetBox
    print(f'Collecting Network Topology from Fabric')
    (interface_groups,segments) = fabric.get_network_inventory()
    
    # Sync VLANs
    # if VNI create VTEP Loopback Interfaces, add vlans and add vni links as l2vpn
    # Create VLAN Layer3 interfaces and assign IPs if ip assigned
    # if Virtual-IP create FHRP Group
    print(f'Fetching L2/L3 Information')
    (vlans,prefixes) = fabric.get_vlan_inventory(switches,sites)
    
    for vlan in vlans:
        print(f'Creating or Updating Vlan {vlan.vlan} {vlan.name}')
        netbox_manager.create_or_update('vlans','vid',vlan)
    
    for prefix in prefixes:
        print(f'Creating or Updating Prefix {prefix.prefix} {prefix.name}')
        netbox_manager.create_or_update('prefixes','prefix',prefix)      
        
        pass
    
    # Sync Prefixes
    print(f'Creating/Updating Prefixes in Netbox')

    print(f'Creating/Updating VLAN Layer3 Interfaces in Netbox')
    # Sync LAGs

    print(f'Creating/Updating LAGs in Netbox')
    
    # Sync connections (cables) to NetBox
    print(f'Collecting Connections from Fabric')
    cables = fabric.get_connection_inventory()
    if cables:
        for cable in cables:
           print(f'Processing cable between {cable["src-device"]} and {cable["dst-device"]}')
           netbox_manager.create_connection(cable)

if __name__ == "__main__":
    main()
